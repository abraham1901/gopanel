#!/usr/bin/env python

import os, sys, shlex, signal, json
from glob import glob
from subprocess import Popen, check_output
from flask import Flask, request, abort, redirect, jsonify, send_from_directory

version = '0.1.0'
etc = '/etc/gopanel'

app = Flask(__name__)

go_cmd = '/usr/bin/goaccess -a -g --real-time-html -p %s --port %d'
go_info = '/usr/bin/goaccess -a -g -o json -p %s'

go_state = {}  # dict of tuples { session: (pid,port) }

@app.route('/sites', methods=['GET'])
def sites():
    sites = {}
    paths = glob(etc+'/*.conf')
    for conf in paths:
        name,_ = os.path.splitext(os.path.basename(conf))
        title = get_conf_var(conf, 'html-report-title', name)
        sites[name] = title
    sess = request.args.get('session', None)
    if sess is None:
        return jsonify({'error':'no session'})
    if sess in go_state:
        proc,port = go_state[sess]
        proc.terminate()
        proc.wait()
        del go_state[sess]
    return jsonify(sites)

@app.route('/run', methods=['GET'])
def run():
    conf = etc+'/%s.conf' % request.args.get('site')
    paths = glob(etc+'/*.conf')
    if conf not in paths:
        return jsonify({'error':'invalid site'})
    sess = request.args.get('session', None)
    if sess is None:
        return jsonify({'error':'no session'})
    if sess in go_state:
        proc,port = go_state[sess]
        proc.terminate()
        proc.wait()
    else:
        port = get_conf_var(conf, 'port', 7890) #+ len(goPid)
    try:
        go_state[sess] = Popen(shlex.split(go_cmd % (conf, int(port)))),port
    except Exception as e:
        return jsonify({'error':'goaccess'})
    return jsonify({'go':os.path.basename(get_conf_var(conf, 'output-format'))})
    
@app.route('/info', methods=['GET'])
def info():
    conf = etc+'/%s.conf' % request.args.get('site')
    paths = glob(etc+'/*.conf')
    if conf not in paths:
        return jsonify({'error':'invalid site'})
    try:
        data = json.loads(check_output(shlex.split(go_info % conf)))
    except Exception as e:
        return jsonify({'error':'goaccess'})
    for k in data:
        if 'data' in data[k]:
            del data[k]['data']
    return jsonify(data)
    
def get_conf_var(conf, key, default=None):
    with open(conf) as f:
        data = f.read().splitlines()
        for line in data:
            if len(line) > 0 and line[0] != '#':
                k,v = line.split(' ', 1)
                if k == key:
                    return v
    return default
 
if __name__ == "__main__":
    app.run(host='localhost', port=7880, debug=False)


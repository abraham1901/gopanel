#!/usr/bin/env python

import os, json, shlex
from glob import glob
from subprocess import Popen
from flask import Flask, request, abort, redirect
app = Flask(__name__)

go_cmd = '/usr/bin/goaccess -a -g --real-time-html -p %s --port %d'
go_pid = {}  # dict of tuples { session: (pid,port) }

@app.route("/sites", methods=['GET'])
def sites():
    sites = {}
    paths = glob('/etc/goaccess/*.conf')
    for conf in paths:
        name,_ = os.path.splitext(os.path.basename(conf))
        title = get_conf_var(conf, 'html-report-title', name)
        sites[name] = title
    return json.dumps(sites)
    
@app.route("/run", methods=['GET'])
def run():
    conf = '/etc/goaccess/%s.conf' % request.args.get('site')
    paths = glob('/etc/goaccess/*.conf')
    if conf in paths:
        sess = request.args.get('session', None)
        if sess is None:
            return json.dumps({'error':'no session'})
        if sess in go_pid:
            port = go_pid[sess][1]
            os.kill(go_pid[sess][0], signal.SIGTERM)
        else:
            port = get_conf_var(conf, 'port', 7890) #+ len(goPid)
        go_pid[sess] = Popen(shlex.split(go_cmd % (conf, int(port)))).pid, port
        return json.dumps({'go':os.path.basename(get_conf_var(conf, 'output-format'))} if go_pid[sess] else {'error':'process failed'})
    return json.dumps({'error':'invalid site'})
    
def get_conf_var(conf, key, default=None):
    with open(conf) as f:
        data = f.read().splitlines()
        for line in data:
            if line[0] != '#':
                k,v = line.split(' ', 2)
                if k == key:
                    return v
    return default
 
if __name__ == "__main__":
    app.run(host='localhost', port=8086, debug=False)

